>> Hi, everyone.

Thank you again for joining us for

our introductory series to building
Web APIs with ASP.NET Core.

Thus far, we've covered
various topics,

such as what are APIs,

what are they used for,

and even seen some examples of

different APIs that we
can make use of today.

In the last video, we
took a look at HTTP.

I got an understanding
of how it allows us to

send information between
two different places.

Well, in this video, I think it's

about time we take a step forward

and see what it
actually feels like to

build a Web API using Visual Studio.

I've gone ahead and opened
up Visual Studio 2019.

The first thing that we'll do is
select "Create a new project",

that should open up the
new project dialog box.

We want to make sure that we find the

ASP.NET Core web
application template.

Now if you don't see this item,

you can search for it in that

template search box
that's at the top;

and if you still don't see it,

go check and make sure
that you have the ASP.NET

under web development workload
installed in Visual Studio.

Now, we'll hit the "Next" button,

and what we'll do here is
give our application a name.

So in this case, I'm going
to call it ContosoRecipes,

because I want to
create a recipes API.

I'll hit "Create" again, and on

the next screen, will
be presented with

some options with the types of

ASP.NET Core applications
that we can create.

For us, we want to make sure that we

have the Web API one selected.

Also on the right side,

we'll leave all the default
options as they are.

That means that configure HTTPS
and also enable OpenAPI support,

should be checked by default.

We'll go ahead and hit
"Create" one more time.

Now in the background,
Visual Studio is going to

take all of that
information that we just

entered and will scaffold out a new

ASP.NET Core web API
project that we could use.

Once that's complete, we
should see our product

available for us inside
of the Solution Explorer.

Now, if you've ever done our
ASP.NET Core 101 videos,

this folder structure should
look fairly familiar for you.

First off, you can see that we have

our Startup and Program.cs files.

Also, you'll see that there's
a Controllers folder,

and inside of there, there should be

a single controller called the
WeatherForecastController.

If we open that up,

we'll notice that there's a
single method in here called Get.

The job of this method is to receive

requests for weather data and
then return some response.

Lastly, you'll see that we also
have a WeatherForecast class.

Now, the purpose of this
class is to form the shape of

the structure of the type of

information that we want
to return from our API.

Let's go ahead and see
if we could run this.

First, to run this in Visual Studio,

we can hit this green button
that's at the top in the toolbar,

or if you want,

we can select the option
of running it in Kestrel,

and we'll do that by selecting

the application name that's
inside of this drop-down box.

Now, that's the one
I'm going to go with,

and I'll go ahead and
hit that green button.

After Visual Studio has loaded up

our application and
launched the web server,

we should see a page pop up
that looks something like this.

I want us to pay attention to

this blue box that's
here that says Get,

and this is representing that Get

operation inside of our controller.

If I hit this "Trial"
button and Execute,

we should be able to see some
responses that come back.

Notice I get a 200 level response,

and here is the information
from the body of that response.

That conclude to this video
on how you can create

new Web API projects
inside of Visual Studio.

Stay tuned because next,

we're going to learn how
we can process request

inside of controllers
and action method.

>> [MUSIC]

